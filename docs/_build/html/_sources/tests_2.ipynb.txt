{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mWARNING: Skipping m2r2 as it is not installed.\u001b[0m\u001b[33m\n",
      "\u001b[0mNote: you may need to restart the kernel to use updated packages.\n",
      "Requirement already satisfied: myst-parser in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (3.0.1)\n",
      "Requirement already satisfied: docutils<0.22,>=0.18 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser) (0.21.2)\n",
      "Requirement already satisfied: jinja2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser) (3.1.4)\n",
      "Requirement already satisfied: markdown-it-py~=3.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser) (3.0.0)\n",
      "Requirement already satisfied: mdit-py-plugins~=0.4 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser) (0.4.1)\n",
      "Requirement already satisfied: pyyaml in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser) (6.0.1)\n",
      "Requirement already satisfied: sphinx<8,>=6 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser) (7.4.7)\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from markdown-it-py~=3.0->myst-parser) (0.1.2)\n",
      "Requirement already satisfied: sphinxcontrib-applehelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (1.0.8)\n",
      "Requirement already satisfied: sphinxcontrib-devhelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (1.0.6)\n",
      "Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (1.0.1)\n",
      "Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (2.0.5)\n",
      "Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.9 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (1.1.10)\n",
      "Requirement already satisfied: sphinxcontrib-qthelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (1.0.7)\n",
      "Requirement already satisfied: Pygments>=2.17 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (2.18.0)\n",
      "Requirement already satisfied: snowballstemmer>=2.2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (2.2.0)\n",
      "Requirement already satisfied: babel>=2.13 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (2.15.0)\n",
      "Requirement already satisfied: alabaster~=0.7.14 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (0.7.16)\n",
      "Requirement already satisfied: imagesize>=1.3 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (1.4.1)\n",
      "Requirement already satisfied: requests>=2.30.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (2.32.3)\n",
      "Requirement already satisfied: packaging>=23.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx<8,>=6->myst-parser) (24.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jinja2->myst-parser) (2.1.5)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx<8,>=6->myst-parser) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx<8,>=6->myst-parser) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx<8,>=6->myst-parser) (2.2.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx<8,>=6->myst-parser) (2024.7.4)\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Collecting sphinx==5.3.0\n",
      "  Using cached sphinx-5.3.0-py3-none-any.whl.metadata (6.4 kB)\n",
      "Requirement already satisfied: sphinxcontrib-applehelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (1.0.8)\n",
      "Requirement already satisfied: sphinxcontrib-devhelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (1.0.6)\n",
      "Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (1.0.1)\n",
      "Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (2.0.5)\n",
      "Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (1.1.10)\n",
      "Requirement already satisfied: sphinxcontrib-qthelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (1.0.7)\n",
      "Requirement already satisfied: Jinja2>=3.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (3.1.4)\n",
      "Requirement already satisfied: Pygments>=2.12 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (2.18.0)\n",
      "Collecting docutils<0.20,>=0.14 (from sphinx==5.3.0)\n",
      "  Using cached docutils-0.19-py3-none-any.whl.metadata (2.7 kB)\n",
      "Requirement already satisfied: snowballstemmer>=2.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (2.2.0)\n",
      "Requirement already satisfied: babel>=2.9 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (2.15.0)\n",
      "Requirement already satisfied: alabaster<0.8,>=0.7 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (0.7.16)\n",
      "Requirement already satisfied: imagesize>=1.3 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (1.4.1)\n",
      "Requirement already satisfied: requests>=2.5.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (2.32.3)\n",
      "Requirement already satisfied: packaging>=21.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx==5.3.0) (24.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from Jinja2>=3.0->sphinx==5.3.0) (2.1.5)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.5.0->sphinx==5.3.0) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.5.0->sphinx==5.3.0) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.5.0->sphinx==5.3.0) (2.2.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.5.0->sphinx==5.3.0) (2024.7.4)\n",
      "Using cached sphinx-5.3.0-py3-none-any.whl (3.2 MB)\n",
      "Using cached docutils-0.19-py3-none-any.whl (570 kB)\n",
      "Installing collected packages: docutils, sphinx\n",
      "  Attempting uninstall: docutils\n",
      "    Found existing installation: docutils 0.21.2\n",
      "    Uninstalling docutils-0.21.2:\n",
      "      Successfully uninstalled docutils-0.21.2\n",
      "  Attempting uninstall: sphinx\n",
      "    Found existing installation: Sphinx 7.4.7\n",
      "    Uninstalling Sphinx-7.4.7:\n",
      "      Successfully uninstalled Sphinx-7.4.7\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "myst-parser 3.0.1 requires sphinx<8,>=6, but you have sphinx 5.3.0 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed docutils-0.19 sphinx-5.3.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Requirement already satisfied: myst-nb in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (1.1.1)\n",
      "Requirement already satisfied: importlib_metadata in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (7.2.1)\n",
      "Requirement already satisfied: ipython in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (8.26.0)\n",
      "Requirement already satisfied: jupyter-cache>=0.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (1.0.0)\n",
      "Requirement already satisfied: nbclient in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (0.10.0)\n",
      "Requirement already satisfied: myst-parser>=1.0.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (3.0.1)\n",
      "Requirement already satisfied: nbformat>=5.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (5.10.4)\n",
      "Requirement already satisfied: pyyaml in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (6.0.1)\n",
      "Requirement already satisfied: sphinx>=5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (5.3.0)\n",
      "Requirement already satisfied: typing-extensions in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (4.12.2)\n",
      "Requirement already satisfied: ipykernel in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-nb) (6.29.5)\n",
      "Requirement already satisfied: attrs in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jupyter-cache>=0.5->myst-nb) (23.2.0)\n",
      "Requirement already satisfied: click in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jupyter-cache>=0.5->myst-nb) (8.1.7)\n",
      "Requirement already satisfied: sqlalchemy<3,>=1.3.12 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jupyter-cache>=0.5->myst-nb) (2.0.34)\n",
      "Requirement already satisfied: tabulate in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jupyter-cache>=0.5->myst-nb) (0.9.0)\n",
      "Requirement already satisfied: docutils<0.22,>=0.18 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser>=1.0.0->myst-nb) (0.19)\n",
      "Requirement already satisfied: jinja2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser>=1.0.0->myst-nb) (3.1.4)\n",
      "Requirement already satisfied: markdown-it-py~=3.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser>=1.0.0->myst-nb) (3.0.0)\n",
      "Requirement already satisfied: mdit-py-plugins~=0.4 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from myst-parser>=1.0.0->myst-nb) (0.4.1)\n",
      "Collecting sphinx>=5 (from myst-nb)\n",
      "  Using cached sphinx-7.4.7-py3-none-any.whl.metadata (6.1 kB)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from nbclient->myst-nb) (8.6.2)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from nbclient->myst-nb) (5.7.2)\n",
      "Requirement already satisfied: traitlets>=5.4 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from nbclient->myst-nb) (5.14.3)\n",
      "Requirement already satisfied: fastjsonschema>=2.15 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from nbformat>=5.0->myst-nb) (2.20.0)\n",
      "Requirement already satisfied: jsonschema>=2.6 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from nbformat>=5.0->myst-nb) (4.22.0)\n",
      "Requirement already satisfied: sphinxcontrib-applehelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (1.0.8)\n",
      "Requirement already satisfied: sphinxcontrib-devhelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (1.0.6)\n",
      "Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (1.0.1)\n",
      "Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (2.0.5)\n",
      "Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.9 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (1.1.10)\n",
      "Requirement already satisfied: sphinxcontrib-qthelp in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (1.0.7)\n",
      "Requirement already satisfied: Pygments>=2.17 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (2.18.0)\n",
      "Collecting docutils<0.22,>=0.18 (from myst-parser>=1.0.0->myst-nb)\n",
      "  Using cached docutils-0.21.2-py3-none-any.whl.metadata (2.8 kB)\n",
      "Requirement already satisfied: snowballstemmer>=2.2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (2.2.0)\n",
      "Requirement already satisfied: babel>=2.13 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (2.15.0)\n",
      "Requirement already satisfied: alabaster~=0.7.14 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (0.7.16)\n",
      "Requirement already satisfied: imagesize>=1.3 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (1.4.1)\n",
      "Requirement already satisfied: requests>=2.30.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (2.32.3)\n",
      "Requirement already satisfied: packaging>=23.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sphinx>=5->myst-nb) (24.1)\n",
      "Requirement already satisfied: zipp>=0.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from importlib_metadata->myst-nb) (3.19.2)\n",
      "Requirement already satisfied: comm>=0.1.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (0.2.2)\n",
      "Requirement already satisfied: debugpy>=1.6.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (1.6.7)\n",
      "Requirement already satisfied: matplotlib-inline>=0.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (0.1.7)\n",
      "Requirement already satisfied: nest-asyncio in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (1.6.0)\n",
      "Requirement already satisfied: psutil in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (5.9.0)\n",
      "Requirement already satisfied: pyzmq>=24 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (25.1.2)\n",
      "Requirement already satisfied: tornado>=6.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipykernel->myst-nb) (6.4.1)\n",
      "Requirement already satisfied: decorator in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipython->myst-nb) (5.1.1)\n",
      "Requirement already satisfied: jedi>=0.16 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipython->myst-nb) (0.19.1)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipython->myst-nb) (3.0.47)\n",
      "Requirement already satisfied: stack-data in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipython->myst-nb) (0.6.3)\n",
      "Requirement already satisfied: pexpect>4.3 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from ipython->myst-nb) (4.9.0)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jedi>=0.16->ipython->myst-nb) (0.8.4)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jinja2->myst-parser>=1.0.0->myst-nb) (2.1.5)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat>=5.0->myst-nb) (2023.12.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat>=5.0->myst-nb) (0.35.1)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat>=5.0->myst-nb) (0.18.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jupyter-client>=6.1.12->nbclient->myst-nb) (2.9.0.post0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from jupyter-core!=5.0.*,>=4.12->nbclient->myst-nb) (4.2.2)\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from markdown-it-py~=3.0->myst-parser>=1.0.0->myst-nb) (0.1.2)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from pexpect>4.3->ipython->myst-nb) (0.7.0)\n",
      "Requirement already satisfied: wcwidth in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython->myst-nb) (0.2.13)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx>=5->myst-nb) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx>=5->myst-nb) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx>=5->myst-nb) (2.2.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from requests>=2.30.0->sphinx>=5->myst-nb) (2024.7.4)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from sqlalchemy<3,>=1.3.12->jupyter-cache>=0.5->myst-nb) (3.0.3)\n",
      "Requirement already satisfied: executing>=1.2.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from stack-data->ipython->myst-nb) (2.0.1)\n",
      "Requirement already satisfied: asttokens>=2.1.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from stack-data->ipython->myst-nb) (2.4.1)\n",
      "Requirement already satisfied: pure-eval in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from stack-data->ipython->myst-nb) (0.2.2)\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/miniconda/envs/pymmf/lib/python3.12/site-packages (from asttokens>=2.1.0->stack-data->ipython->myst-nb) (1.16.0)\n",
      "Using cached sphinx-7.4.7-py3-none-any.whl (3.4 MB)\n",
      "Using cached docutils-0.21.2-py3-none-any.whl (587 kB)\n",
      "Installing collected packages: docutils, sphinx\n",
      "  Attempting uninstall: docutils\n",
      "    Found existing installation: docutils 0.19\n",
      "    Uninstalling docutils-0.19:\n",
      "      Successfully uninstalled docutils-0.19\n",
      "  Attempting uninstall: sphinx\n",
      "    Found existing installation: Sphinx 5.3.0\n",
      "    Uninstalling Sphinx-5.3.0:\n",
      "      Successfully uninstalled Sphinx-5.3.0\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "sphinx-rtd-theme 2.0.0 requires docutils<0.21, but you have docutils 0.21.2 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed docutils-0.21.2 sphinx-7.4.7\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip uninstall m2r2 -y\n",
    "%pip install myst-parser\n",
    "%pip install sphinx==5.3.0\n",
    "%pip install myst-nb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "===========\n",
    "scipyoptdoc\n",
    "===========\n",
    "\n",
    "Proper docstrings for scipy.optimize.minimize et al.\n",
    "\n",
    "Usage::\n",
    "\n",
    "    .. solve:function:: scipy.optimize.minimize\n",
    "       :impl: scipy.optimize._optimize._minimize_nelder_mead\n",
    "       :method: Nelder-Mead\n",
    "\n",
    "Produces output similar to autodoc, except\n",
    "\n",
    "- The docstring is obtained from the 'impl' function\n",
    "- The call signature is mangled so that the default values for method keyword\n",
    "  and options dict are substituted\n",
    "- 'Parameters' section is replaced by 'Options' section\n",
    "- See Also link to the actual function documentation is inserted\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "import sys\n",
    "import sphinx\n",
    "import inspect\n",
    "import textwrap\n",
    "import pydoc\n",
    "import os\n",
    "\n",
    "sys.path.insert(0, os.path.abspath(\"../../pyMMF\"))\n",
    "import pyMMF\n",
    "\n",
    "if sphinx.__version__ < \"1.0.1\":\n",
    "    raise RuntimeError(\"Sphinx 1.0.1 or newer is required\")\n",
    "\n",
    "from numpydoc.numpydoc import mangle_docstrings\n",
    "from docutils.statemachine import StringList\n",
    "from sphinx.domains.python import PythonDomain\n",
    "from scipy._lib._util import getfullargspec_no_self\n",
    "\n",
    "\n",
    "def setup(app):\n",
    "    app.add_domain(SolveInterfaceDomain)\n",
    "    return {\"parallel_read_safe\": True}\n",
    "\n",
    "\n",
    "def _option_required_str(x):\n",
    "    if not x:\n",
    "        raise ValueError(\"value is required\")\n",
    "    return str(x)\n",
    "\n",
    "\n",
    "def _import_object(name):\n",
    "    parts = name.split(\".\")\n",
    "    __import__(parts[0])\n",
    "    # module_name = \".\".join(parts[:-1])\n",
    "    # __import__(module_name)\n",
    "    # obj = getattr(sys.modules[module_name], parts[-1])\n",
    "    print(\"*\" * 50)\n",
    "    obj = sys.modules[parts[0]]\n",
    "    for part in parts[1:]:\n",
    "        print(obj, part)\n",
    "        obj = getattr(obj, part)\n",
    "    print(obj)\n",
    "    return obj\n",
    "\n",
    "\n",
    "class SolveInterfaceDomain(PythonDomain):\n",
    "    name = \"solve\"\n",
    "\n",
    "    def __init__(self, *a, **kw):\n",
    "        super().__init__(*a, **kw)\n",
    "        self.directives = dict(self.directives)\n",
    "        function_directive = self.directives[\"function\"]\n",
    "        self.directives[\"function\"] = wrap_mangling_directive(function_directive)\n",
    "\n",
    "\n",
    "BLURB = \"\"\"\n",
    ".. seealso:: For documentation for the rest of the parameters, see `%s`\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def wrap_mangling_directive(base_directive):\n",
    "    class directive(base_directive):\n",
    "        def run(self):\n",
    "            env = self.state.document.settings.env\n",
    "\n",
    "            # Interface function\n",
    "            name = self.arguments[0].strip()\n",
    "            obj = _import_object(name)\n",
    "            args, varargs, keywords, defaults = getfullargspec_no_self(obj)[:4]\n",
    "\n",
    "            # Implementation function\n",
    "            impl_name = self.options[\"impl\"]\n",
    "            impl_obj = _import_object(impl_name)\n",
    "            impl_args, _, _, impl_defaults = getfullargspec_no_self(impl_obj)[:4]\n",
    "\n",
    "            print(\"--\" * 50)\n",
    "            print(impl_name)\n",
    "            print(getfullargspec_no_self(impl_obj))\n",
    "            print(\"++\" * 50)\n",
    "            print(name)\n",
    "            print(args, varargs, keywords, defaults)\n",
    "\n",
    "            # Format signature taking implementation into account\n",
    "            args = list(args)\n",
    "            defaults = list(defaults)\n",
    "\n",
    "            def set_default(arg, value):\n",
    "                print(\"?\" * 50)\n",
    "                print(args)\n",
    "                print(arg, value)\n",
    "                j = args.index(arg)\n",
    "                defaults[len(defaults) - (len(args) - j)] = value\n",
    "\n",
    "            def remove_arg(arg):\n",
    "                if arg not in args:\n",
    "                    return\n",
    "                j = args.index(arg)\n",
    "                if j < len(args) - len(defaults):\n",
    "                    del args[j]\n",
    "                else:\n",
    "                    del defaults[len(defaults) - (len(args) - j)]\n",
    "                    del args[j]\n",
    "\n",
    "            options = []\n",
    "            for j, opt_name in enumerate(impl_args):\n",
    "                if opt_name in args:\n",
    "                    continue\n",
    "                if j >= len(impl_args) - len(impl_defaults):\n",
    "                    options.append((opt_name, impl_defaults[-len(impl_args) + j]))\n",
    "                else:\n",
    "                    options.append((opt_name, None))\n",
    "            set_default(\"options\", dict(options))\n",
    "            if \"method\" in self.options and \"method\" in args:\n",
    "                set_default(\"method\", self.options[\"method\"].strip())\n",
    "            elif \"solver\" in self.options and \"solver\" in args:\n",
    "                set_default(\"solver\", self.options[\"solver\"].strip())\n",
    "\n",
    "            special_args = {\n",
    "                \"solver\",\n",
    "                \"curvature\",\n",
    "                \"storeData\",\n",
    "                \"options\",\n",
    "                \"solver\",\n",
    "            }\n",
    "            for arg in list(args):\n",
    "                if arg not in impl_args and arg not in special_args:\n",
    "                    remove_arg(arg)\n",
    "\n",
    "            signature = str(inspect.signature(obj))\n",
    "            print(\"Signature:\", signature)\n",
    "\n",
    "            # Produce output\n",
    "            self.options[\"noindex\"] = True\n",
    "            self.arguments[0] = name + signature\n",
    "            lines = textwrap.dedent(pydoc.getdoc(impl_obj)).splitlines()\n",
    "\n",
    "            print(\"X\" * 50)\n",
    "            print(lines)\n",
    "            print(\"O\" * 50)\n",
    "            # Change \"Options\" to \"Other Parameters\", run numpydoc, reset\n",
    "            new_lines = []\n",
    "            for line in lines:\n",
    "                # Remap Options to the \"Other Parameters\" numpydoc section\n",
    "                # along with correct heading length\n",
    "                if line.strip() == \"Options\":\n",
    "                    line = \"Other Parameters\"\n",
    "                    new_lines.extend([line, \"-\" * len(line)])\n",
    "                    continue\n",
    "                new_lines.append(line)\n",
    "            # use impl_name instead of name here to avoid duplicate refs\n",
    "            mangle_docstrings(env.app, \"function\", impl_name, None, None, new_lines)\n",
    "            lines = new_lines\n",
    "            new_lines = []\n",
    "            for line in lines:\n",
    "                if line.strip() == \":Other Parameters:\":\n",
    "                    new_lines.extend((BLURB % (name,)).splitlines())\n",
    "                    new_lines.append(\"\\n\")\n",
    "                    new_lines.append(\":Options:\")\n",
    "                else:\n",
    "                    new_lines.append(line)\n",
    "\n",
    "            print(new_lines)\n",
    "\n",
    "            self.content = StringList(new_lines, parent=self.content.parent)\n",
    "            return base_directive.run(self)\n",
    "\n",
    "        option_spec = dict(base_directive.option_spec)\n",
    "        option_spec[\"impl\"] = _option_required_str\n",
    "        option_spec[\"method\"] = _option_required_str\n",
    "\n",
    "    return directive\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**************************************************\n",
      "<module 'pyMMF' from '/home/spopoff/dev/pyMMF/pyMMF/__init__.py'> solvers\n",
      "<module 'pyMMF.solvers' from '/home/spopoff/dev/pyMMF/pyMMF/solvers/__init__.py'> radial\n",
      "<module 'pyMMF.solvers.radial' from '/home/spopoff/dev/pyMMF/pyMMF/solvers/radial.py'> solve_radial\n",
      "<function solve_radial at 0x79cf841c0a40>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\"Solves the scalar wave equation for an axisymmetric index profile\\ndefine by a radial function.\\nThe `IndexProfile` object provided must be\\ninitialized with the :ref:`initFromRadialFunction\\n<pyMMF.IndexProfile.initFromRadialFunction>` method.\\n\\nOptions\\n-------\\ndegenerate_mode : str\\n    Choice for degenerate subspaces. Default is '{DEFAULT_DEGENERATE_MODE}'.\\nmin_radius_bc : float\\n    Minimum radius for the boundary condition. Default is {MIN_RADIUS_BC_COEFF_DEFAULT}.\\nchange_bc_radius_step : float\\n    Factor to change the boundary condition radius. Default is {CHANGE_BC_RADIUS_STEP_DEFAULT}.\\nN_beta_coarse : int\\n    Number of beta values to scan. Default is {N_BETA_COARSE_DEFAULT}.\\ndh : float\\n    Spatial resolution. Default is indexProfile.areaSize / indexProfile.npoints.\\nbeta_tol : float\\n    Tolerance for the beta value. Default is np.finfo(np.float64).eps.\\nfield_limit_tol : float\\n    Tolerance for the field limit. Default is 1e-3.\\nbeta_min : float\\n    Minimum beta value. Default is None. Set the values to `2*np.pi/wl * n_func(r_max0)`.\\nsave_func : bool\\n    Save the radial and azimuthal functions. Default is False.\""
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "impl_name = \"pyMMF.solvers.radial.solve_radial\"\n",
    "\n",
    "def _import_object(name):\n",
    "    parts = name.split(\".\")\n",
    "    __import__(parts[0])\n",
    "    # module_name = \".\".join(parts[:-1])\n",
    "    # __import__(module_name)\n",
    "    # obj = getattr(sys.modules[module_name], parts[-1])\n",
    "    print(\"*\" * 50)\n",
    "    obj = sys.modules[parts[0]]\n",
    "    for part in parts[1:]:\n",
    "        print(obj, part)\n",
    "        obj = getattr(obj, part)\n",
    "    print(obj)\n",
    "    return obj\n",
    "\n",
    "o = _import_object(impl_name)\n",
    "pydoc.getdoc(o)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**************************************************\n",
      "<module 'pyMMF' from '/home/spopoff/dev/pyMMF/pyMMF/__init__.py'> propagationModeSolver\n",
      "<class 'pyMMF.core.propagationModeSolver'> solve\n",
      "<function propagationModeSolver.solve at 0x734614f64ea0>\n",
      "**************************************************\n",
      "<module 'pyMMF' from '/home/spopoff/dev/pyMMF/pyMMF/__init__.py'> solvers\n",
      "<module 'pyMMF.solvers' from '/home/spopoff/dev/pyMMF/pyMMF/solvers/__init__.py'> radial\n",
      "<module 'pyMMF.solvers.radial' from '/home/spopoff/dev/pyMMF/pyMMF/solvers/radial.py'> solve_radial\n",
      "<function solve_radial at 0x734644172660>\n",
      "----------------------------------------------------------------------------------------------------\n",
      "pyMMF.solvers.radial.solve_radial\n",
      "FullArgSpec(args=['indexProfile', 'wl', 'degenerate_mode', 'min_radius_bc', 'change_bc_radius_step', 'N_beta_coarse', 'dh', 'beta_tol', 'field_limit_tol', 'beta_min', 'save_func'], varargs=None, varkw=None, defaults=('sin', 4, 0.9, 1000, None, None, 0.001, None, False), kwonlyargs=[], kwonlydefaults=None, annotations={})\n",
      "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
      "pyMMF.propagationModeSolver.solve\n",
      "['self', 'solver', 'curvature', 'storeData', 'options'] None None ('default', None, True, {})\n",
      "??????????????????????????????????????????????????\n",
      "['self', 'solver', 'curvature', 'storeData', 'options']\n",
      "options {'indexProfile': None, 'wl': None, 'degenerate_mode': 'sin', 'min_radius_bc': 4, 'change_bc_radius_step': 0.9, 'N_beta_coarse': 1000, 'dh': None, 'beta_tol': None, 'field_limit_tol': 0.001, 'beta_min': None, 'save_func': False}\n",
      "Signature: (self, solver: str = 'default', curvature: bool = None, storeData: bool = True, options: dict = {})\n",
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n",
      "[]\n",
      "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n",
      "[]\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'base_directive' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[13], line 102\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[38;5;28mprint\u001b[39m(new_lines)\n\u001b[1;32m     99\u001b[0m \u001b[38;5;66;03m# self.content = StringList(new_lines, parent=self.content.parent)\u001b[39;00m\n\u001b[1;32m    100\u001b[0m \u001b[38;5;66;03m# return base_directive.run(self)\u001b[39;00m\n\u001b[0;32m--> 102\u001b[0m option_spec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mdict\u001b[39m(\u001b[43mbase_directive\u001b[49m\u001b[38;5;241m.\u001b[39moption_spec)\n\u001b[1;32m    103\u001b[0m option_spec[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mimpl\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m _option_required_str\n\u001b[1;32m    104\u001b[0m option_spec[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmethod\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m _option_required_str\n",
      "\u001b[0;31mNameError\u001b[0m: name 'base_directive' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Interface function\n",
    "name = \"pyMMF.propagationModeSolver.solve\"\n",
    "obj = _import_object(name)\n",
    "args, varargs, keywords, defaults = getfullargspec_no_self(obj)[:4]\n",
    "\n",
    "# Implementation function\n",
    "impl_name = \"pyMMF.solvers.radial.solve_radial\"\n",
    "impl_obj = _import_object(impl_name)\n",
    "impl_args, _, _, impl_defaults = getfullargspec_no_self(impl_obj)[:4]\n",
    "\n",
    "print(\"--\" * 50)\n",
    "print(impl_name)\n",
    "print(getfullargspec_no_self(impl_obj))\n",
    "print(\"++\" * 50)\n",
    "print(name)\n",
    "print(args, varargs, keywords, defaults)\n",
    "\n",
    "# Format signature taking implementation into account\n",
    "args = list(args)\n",
    "defaults = list(defaults)\n",
    "\n",
    "def set_default(arg, value):\n",
    "    print(\"?\" * 50)\n",
    "    print(args)\n",
    "    print(arg, value)\n",
    "    j = args.index(arg)\n",
    "    defaults[len(defaults) - (len(args) - j)] = value\n",
    "\n",
    "def remove_arg(arg):\n",
    "    if arg not in args:\n",
    "        return\n",
    "    j = args.index(arg)\n",
    "    if j < len(args) - len(defaults):\n",
    "        del args[j]\n",
    "    else:\n",
    "        del defaults[len(defaults) - (len(args) - j)]\n",
    "        del args[j]\n",
    "\n",
    "options = []\n",
    "for j, opt_name in enumerate(impl_args):\n",
    "    if opt_name in args:\n",
    "        continue\n",
    "    if j >= len(impl_args) - len(impl_defaults):\n",
    "        options.append((opt_name, impl_defaults[-len(impl_args) + j]))\n",
    "    else:\n",
    "        options.append((opt_name, None))\n",
    "set_default(\"options\", dict(options))\n",
    "# if \"method\" in self.options and \"method\" in args:\n",
    "#     set_default(\"method\", self.options[\"method\"].strip())\n",
    "# elif \"solver\" in self.options and \"solver\" in args:\n",
    "#     set_default(\"solver\", self.options[\"solver\"].strip())\n",
    "\n",
    "special_args = {\n",
    "    \"solver\",\n",
    "    \"curvature\",\n",
    "    \"storeData\",\n",
    "    \"options\",\n",
    "    \"solver\",\n",
    "}\n",
    "for arg in list(args):\n",
    "    if arg not in impl_args and arg not in special_args:\n",
    "        remove_arg(arg)\n",
    "\n",
    "signature = str(inspect.signature(obj))\n",
    "print(\"Signature:\", signature)\n",
    "\n",
    "# Produce output\n",
    "# options[\"noindex\"] = True\n",
    "# arguments[0] = name + signature\n",
    "lines = textwrap.dedent(pydoc.getdoc(impl_obj)).splitlines()\n",
    "\n",
    "print(\"X\" * 50)\n",
    "print(lines)\n",
    "print(\"O\" * 50)\n",
    "# Change \"Options\" to \"Other Parameters\", run numpydoc, reset\n",
    "new_lines = []\n",
    "for line in lines:\n",
    "    # Remap Options to the \"Other Parameters\" numpydoc section\n",
    "    # along with correct heading length\n",
    "    if line.strip() == \"Options\":\n",
    "        line = \"Other Parameters\"\n",
    "        new_lines.extend([line, \"-\" * len(line)])\n",
    "        continue\n",
    "    new_lines.append(line)\n",
    "# use impl_name instead of name here to avoid duplicate refs\n",
    "# mangle_docstrings(env.app, \"function\", impl_name, None, None, new_lines)\n",
    "lines = new_lines\n",
    "new_lines = []\n",
    "for line in lines:\n",
    "    if line.strip() == \":Other Parameters:\":\n",
    "        new_lines.extend((BLURB % (name,)).splitlines())\n",
    "        new_lines.append(\"\\n\")\n",
    "        new_lines.append(\":Options:\")\n",
    "    else:\n",
    "        new_lines.append(line)\n",
    "\n",
    "print(new_lines)\n",
    "\n",
    "# self.content = StringList(new_lines, parent=self.content.parent)\n",
    "# return base_directive.run(self)\n",
    "\n",
    "option_spec = dict(base_directive.option_spec)\n",
    "option_spec[\"impl\"] = _option_required_str\n",
    "option_spec[\"method\"] = _option_required_str"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pymmf",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
